// Code generated for package tmplgen by go-bindata DO NOT EDIT. (@generated)
// sources:
// tmpl/common.tmpl
// tmpl/list.tmpl
// tmpl/map.tmpl
// tmpl/scalar.tmpl
// tmpl/scalar_parse.tmpl
// tmpl/scalar_parseliteral.tmpl
// tmpl/scalar_serialize.tmpl
// tmpl/struct.tmpl
// tmpl/struct_empty.tmpl
// tmpl/struct_field.tmpl
// tmpl/union.tmpl
// tmpl/union_degenerate.tmpl
package tmplgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCommonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x6e\xdb\x30\x10\xbc\xf3\x2b\xb6\x04\x02\x48\x80\x42\xdd\x03\xf8\xd0\x3c\x0e\x41\x0d\xc7\x68\xdc\x53\x51\x04\x0c\xb9\xa2\x09\x49\xa4\x4a\xae\x1c\x1b\x86\xff\xbd\xa0\x24\x3f\xd2\x14\x6d\x7d\x30\xa9\x9d\x19\x2e\x67\x96\x65\x09\x77\x5e\x23\x18\x74\x18\x24\xa1\x86\xd7\x1d\x18\x4b\xeb\xfe\x55\x28\xdf\x96\xb6\x6b\x74\x69\xfc\x75\x5a\xaf\xbb\x60\x5b\x2c\xa3\x5a\x63\x2b\x4b\x83\xae\x34\x41\x76\xeb\x9f\x4d\x19\x31\x6c\x30\x14\x70\xff\x04\x8b\xa7\x15\x3c\xdc\x3f\xae\x04\x63\x9d\x54\xb5\x34\x08\xfb\x3d\x88\xe5\xb4\x3f\x1c\x18\xb3\x6d\xe7\x03\x41\xc6\x00\x00\xb8\xf2\x8e\x70\x4b\x7c\xfc\xaa\x5a\xe2\x6c\xdc\x5e\xdc\x62\xea\x73\x6d\xfc\x71\xcb\xff\x83\x53\x36\xd2\x99\x5e\x1a\x2c\x65\x9c\xce\x4f\x36\xde\xa9\x3e\xfa\x1b\x89\xca\xea\xc6\xba\xfa\x1f\xdc\x32\x71\xac\x33\xa5\xb2\x7a\xba\x51\x32\xbb\x7a\x3e\xdb\xe5\x2c\x67\x8c\x76\x1d\x82\xf3\x1a\xe7\x5e\x6a\x0c\x50\xf5\x4e\x65\x8a\xb6\x30\x99\x17\x77\xe3\x5a\xa4\xbe\xc7\xde\x62\x6e\x5d\x5d\xc0\x6b\x6f\x9b\xa4\x49\x5d\xc5\xc2\x6b\xbc\x1d\x0b\x39\x64\xa7\x52\x01\x18\x82\x0f\x39\x53\xde\x45\xba\xe8\x74\x47\xdb\x2f\xb8\x83\x19\xf0\xc5\xa9\xc6\x19\xdb\xc8\x90\x14\x0b\x4f\xa9\x0c\x33\xa8\x5a\x12\x0f\xe9\x88\x2a\xe3\x0b\x4f\xf0\xb8\x9c\xdf\x43\xc2\x78\x7e\x24\x3f\xba\x8d\x6c\xac\x9e\x1c\xbc\x97\x4c\x18\x4c\xe0\x32\xf8\x8d\xd5\xa8\x3f\x8a\x53\xa4\x7f\x96\x26\xc7\x67\xfe\x37\x87\xdb\x0e\x15\xa1\x5e\xa5\xe8\x66\xc0\xcf\x15\x18\xd2\xbc\x5a\x09\x38\x55\xae\x22\x67\x2c\x85\x0a\x01\xa3\x6f\x36\xf8\xd2\xca\xee\x45\x52\xd6\xc1\xf4\x16\xc4\xd7\x11\x58\xca\x20\xdb\x98\xb2\x73\x84\xa1\x92\x0a\xf7\x87\x63\x7a\xb0\x1f\x46\x48\xb1\x00\x5f\xc3\xcd\x0c\x3a\xf1\xec\xfb\xa0\x50\x9c\x93\xce\xc7\x67\x54\xc1\x27\x5f\x4f\xfc\xf4\x0b\x48\x7d\x70\xe0\x6c\x53\x5c\x04\x3b\xc0\x87\xe1\x5f\x06\x33\x9e\xf8\x39\x98\xf8\x9d\xd7\xb8\xe3\x3f\xc6\x77\x1e\xdf\x2c\xa9\x35\x90\x4c\xb8\x0c\x46\x64\xc9\xdf\xf1\x32\x4a\x46\x3c\x8f\xfe\xe6\xf7\x86\x14\xc5\xdc\xfb\xba\xef\x6e\x77\x09\xcf\x48\xe6\x67\x59\xa4\x60\x9d\xf9\x9b\xe6\x79\x60\x9c\x54\x1a\x2b\xd9\x37\xf4\x41\x31\xd8\xba\x1c\x5a\xef\x6a\xe7\xdf\x1c\xd4\xb8\x1b\xa6\x71\x03\x57\x2b\x5e\xa4\xdb\xe7\x93\xe7\x03\xfb\x15\x00\x00\xff\xff\x3e\x1f\x82\xd2\x5a\x04\x00\x00")

func tmplCommonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCommonTmpl,
		"tmpl/common.tmpl",
	)
}

func tmplCommonTmpl() (*asset, error) {
	bytes, err := tmplCommonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/common.tmpl", size: 1114, mode: os.FileMode(420), modTime: time.Unix(1623174493, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplListTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xdf\x4f\xe3\x38\x10\x7e\xa6\x7f\xc5\x10\xe9\x4e\x8e\x14\x45\xf7\x70\xba\x87\x48\x7d\xe8\xc1\x9d\x54\x1d\xca\xa1\x82\xf6\x05\xa1\x95\x49\x26\xa9\x37\xae\x1d\x9c\x09\x50\x65\xfb\xbf\xaf\x9c\xb4\x25\x6d\xcc\x6e\x59\x89\x65\xb5\xe0\x07\x84\x7f\xcc\x37\x9f\x3f\xcf\x7c\x84\x3b\x6e\xa0\x69\x20\x84\xcf\x70\xa6\x13\x2e\x63\xbe\x40\x58\xad\x60\x0c\xb9\xe1\xe5\xfc\x56\x86\x31\xde\xff\x7f\xf3\x09\x13\x62\x9b\x95\x6e\x7a\xa2\x55\x26\xf2\x66\x04\x00\x60\xa3\x22\xf0\x2c\xd0\x1a\xc0\x0b\xda\x8d\x7f\x05\xca\xb4\x8a\xb6\x60\xdd\xbc\x0b\xb2\xc3\x9b\x90\x17\xc1\xef\x3b\xdb\x8f\xbb\x76\x5c\x2e\x4b\x8c\x5a\x8a\x1f\xb8\xac\xd1\x4e\xf7\xb8\x06\x3b\xe7\x27\x26\xdf\xcf\xd7\x31\x9d\x98\xbc\x5e\xa0\xa2\x5d\xf8\x96\x44\x81\xcb\x3e\x8b\xcd\xc9\xfe\x0d\xf7\x47\x47\xab\xa7\x51\xac\x55\x5c\x4b\xb9\x15\x69\xaa\xc8\x0f\x06\xa1\x7b\x64\xf7\xa6\x33\xac\xb4\xbc\xc3\x08\xb2\x5a\x25\xac\xdc\xc2\xaf\xd7\xcf\xb9\xe1\x8b\xca\x07\x26\x14\xa1\xc9\x78\x82\xcd\x2a\x00\x34\x46\x1b\x1f\x86\x34\xa9\x0a\x40\x17\x10\x8d\xa1\x0c\x2f\x74\x6d\x12\x0c\x59\xd3\xb4\xcc\xcf\x79\x52\xf0\xdc\x8a\x17\xae\x1f\xdf\xae\x5e\x2c\x17\x37\x5a\xc6\x7a\x86\x49\x6d\x2a\xbb\xeb\x0f\x40\x45\x06\xc7\xba\x70\x64\xb3\xc3\x20\xd5\x46\x81\x12\xb2\xa5\x15\x6b\x8a\x75\x8a\x43\x11\x46\x83\x25\x6e\xf2\x8e\xa8\x7d\xbe\xab\xf6\x41\xae\x07\x87\x6c\xad\xea\x9a\x40\x94\x32\x0d\x9d\xc8\xf6\x04\x1a\xd3\x69\x32\xd8\xad\xee\x05\x25\x73\x20\x6e\x53\x71\x93\x87\x8c\x96\x25\xba\xa4\x4b\x78\x85\x8f\x69\x22\xe7\x65\x75\x4d\xed\x2d\x61\x0c\x54\x85\x67\x5a\x17\x75\xf9\xf7\xd2\x9e\x67\xc4\x87\xc2\x75\x90\x8a\xfe\xfa\xf3\x39\x70\x53\x95\xe2\x83\x13\x2f\xc5\x8c\xd7\x92\xdc\x60\xfd\x87\xc8\x16\x14\xfe\x63\xf5\xc8\x98\x57\xab\x42\xe9\x7b\x05\x05\x2e\x81\xda\x0a\xfe\xed\xd2\x0b\xac\x16\xc3\x04\xab\xc1\x4a\xd3\xd8\xe7\x67\x5c\xa5\xc0\xf0\xb6\xd7\x90\xa1\xfd\xf1\x9f\x50\x69\x78\x41\x46\xa8\x1c\x3c\x29\x54\xe1\xf9\xc0\x14\x02\xdb\x6d\x5c\xa1\x8a\x4b\x6e\x72\x24\x1f\xbc\x6d\xaf\x9c\x7a\xbe\x0f\xab\x61\x46\x91\xb5\x92\x1c\x8f\xed\x55\x0e\x2b\xba\x03\xee\x41\x6d\xfe\x13\x91\x76\x82\x47\x63\x2b\x7e\x38\xa9\x2c\x37\xe6\x2c\xf9\x17\x20\xb1\xef\x68\xb3\x16\xa1\x93\x06\xbc\x2d\x45\xcf\x25\x4b\xd3\x00\xca\xb6\x41\x07\x5b\x6b\x22\x9b\x6a\x72\x86\xaa\x74\x3f\xb2\xe7\x43\xbd\x5f\xbd\x89\x94\x07\xb9\x73\xcf\x06\xcf\x44\x45\xec\x6b\x6e\xed\xbf\x51\xcb\x1b\xa0\x92\xa5\x69\x5b\x5d\x54\x34\x25\x34\x9c\xb4\x71\x54\x5f\x32\x17\x32\x35\xa8\xec\xe9\x05\x2f\x90\x5d\x5d\x6f\x8d\x29\x80\x3f\x86\x01\x99\x36\x70\x2c\x28\x3c\xd5\x0a\x99\x4b\x24\x3b\x3e\x06\xa0\x5a\x80\x75\x03\x08\x0a\x63\x7c\x20\x47\x7e\x38\xb0\x03\x1c\x62\x38\xcf\x0d\x95\x80\x57\xb1\x16\x70\x1a\x81\x15\xe5\x69\x27\xf8\x61\x5a\xec\xdc\x6b\xaa\x48\x3b\x7c\xc1\xb3\x5c\x9d\xf6\x00\x4f\xf6\xf9\x66\x6c\x8b\x6a\x0c\xbc\x2c\x51\xa5\x6c\xb3\xd2\xd5\xc5\x21\x7f\x0d\xd6\x17\xec\x05\x0a\x79\x74\x88\xab\xcc\xb8\xca\xf1\xa5\x7d\xe5\x7b\x3e\x03\xab\x42\x94\xaf\xf3\x1d\xd8\xa6\x27\x5e\xe0\xfb\x67\xe8\x2f\xe1\xc9\xef\xa6\xfc\x6e\xca\x6e\x90\x9f\xd5\x94\x4f\x74\xad\x0e\xfb\x57\xfc\x59\x66\xf3\x66\xad\x64\x1d\x68\xbd\x04\x55\x4e\x73\xe6\xb7\x6f\xf1\x8d\xa7\x58\x05\xa3\x95\x7f\x34\xfa\x12\x00\x00\xff\xff\x5a\x28\x3e\x69\x95\x11\x00\x00")

func tmplListTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplListTmpl,
		"tmpl/list.tmpl",
	)
}

func tmplListTmpl() (*asset, error) {
	bytes, err := tmplListTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/list.tmpl", size: 4501, mode: os.FileMode(420), modTime: time.Unix(1634851723, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMapTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x51\x4f\xdb\x30\x10\x7e\x1e\xbf\xe2\xf0\xc3\xe4\x48\x51\xc4\x5e\x2b\xf5\xa1\x82\x4d\x42\x65\xd9\x34\xd0\x5e\x10\x8a\xbc\xe6\x5a\xbc\xb8\x76\x70\x9c\x6e\x55\x96\xff\x3e\x39\x49\x43\x12\xa7\x88\x31\x18\x68\xe2\x1e\x10\xb6\xef\x3e\x7f\x77\xfd\x7c\xbd\x6e\x98\x86\xa2\x80\x00\x7e\xc1\x99\x5a\x30\x11\xb2\x35\x42\x59\xc2\x14\x56\x9a\xa5\xd7\x37\x22\x08\xf1\xc7\xa7\x6f\xdf\x71\x61\xe8\x6e\xa7\x5e\x1e\x2b\xb9\xe4\xab\xe2\x00\x00\xc0\x46\x4d\x80\x58\xa0\x06\x80\xf8\xd5\xc1\x07\x8e\x22\xce\x26\x2d\x58\xbd\xae\x83\xac\x91\x99\x21\x13\x78\xdb\x3b\xbe\x3d\xb5\x76\xb1\x4d\x71\x52\x51\xfc\xca\x44\x8e\x76\x39\xe0\xea\xf7\xfc\x67\x7a\x35\xbc\xaf\x66\x3a\xd3\xab\x7c\x8d\xd2\xf4\xe1\x2b\x12\x09\x6e\xbb\x2c\x76\x9e\xdd\x0c\x87\x56\xd3\xea\xd4\x28\x54\x32\xcc\x85\xa0\x96\xe9\x1c\xb7\x23\x3c\x3d\xdf\x41\x1a\x70\x2f\xfd\x37\xbd\xf5\x17\xcc\x94\xd8\xe0\x04\x74\xfd\x4f\xb4\x66\x69\xc4\xcc\x6d\x50\x27\x9e\xcc\x71\x9b\xdd\xab\x96\x1d\xd2\x67\x3c\x33\xfb\x18\x3b\x84\x5b\x36\xcb\x5c\x2e\x68\xda\xe2\x34\xfb\x9f\x99\x66\xeb\xcc\x03\xca\xa5\x41\xbd\x64\x0b\x2c\x4a\x1f\x50\x6b\xa5\x3d\x70\x8b\x68\x32\x1f\x54\x02\x93\x29\xa4\xc1\xb9\xca\xf5\x02\x03\xca\x53\x11\x07\xa1\x8a\xd1\x73\xdc\xf9\x12\x0e\x55\x32\x82\x63\x4d\xa3\xc9\xb5\x04\xc9\x45\x75\x61\xa8\x8c\x05\x71\xab\xed\xa2\x1a\x4b\xc0\x64\xc1\x47\x96\x9e\x1a\xd4\xcc\x28\x4d\xdd\xcb\x17\xd7\x5c\xc4\x1a\xa5\x75\x5e\xb3\x04\xe9\xe5\x55\x4b\xd5\x87\x23\xef\xc0\x89\x58\x2a\x0d\x87\xdc\x04\x27\x4a\x22\x1d\x4b\xdf\x9a\xac\xc2\xa3\x8a\xb3\x85\xe6\x26\x08\xf1\xa7\x19\x21\xd0\x54\xc0\xfa\x1d\x4e\x6d\x9e\x7b\x10\x47\x8a\x31\xea\xe7\x56\xa2\x97\xe6\x14\x58\x9a\xa2\x8c\xe9\x6e\xc7\xaf\xb8\xba\xbc\x5c\x9c\xe6\xf6\x4e\x20\x17\x03\x8d\x8f\xaa\xb7\x7a\xdc\x0f\xd7\xef\x68\x6f\x78\x55\x70\x6b\x4f\xa4\xe0\xc8\x6f\x44\xfc\x42\x14\x5c\x14\xf6\x12\xca\x64\x0c\x14\x6f\x3a\xb2\x08\xec\x9f\x39\x97\x71\x70\x6e\x34\x97\x2b\x20\x82\xcb\x84\x78\x40\x25\x02\xed\xcb\x87\xcb\xe4\x82\xe9\x15\x1a\x0f\xc8\x4e\x21\xa7\x27\xc4\xf3\xa0\x1c\xbf\xd5\x54\xde\xc7\x3c\x6e\xeb\x60\x8b\x12\xcc\x32\x0b\xf5\x9c\xb5\xe8\xe5\x75\x2a\x8d\xaa\xf3\x02\xd2\x32\x26\x40\x2c\x57\xb2\x2f\xb5\xa2\x00\x94\xf1\xbe\xd3\xe7\x6c\x18\x33\x21\x1e\xdc\x2d\x06\x5f\xcc\x51\x84\xd2\xe8\xed\x6b\xb3\x68\x6c\xa4\x59\x3c\x4e\xbb\x48\x7c\xd8\xbc\x98\x5e\x71\x97\x78\x3b\xe9\x16\x96\x74\xf9\x44\x4a\xb6\x03\x5f\xe9\x1d\xec\x19\xc2\x1b\x5d\xfe\xf5\x2c\x1e\xbd\xb7\x30\xf7\x9d\xc8\xe7\xfd\x61\xf8\xce\x91\x7c\x7c\xd0\x7d\xca\x77\x94\x6c\xdc\x77\xd4\xf9\xb4\xfe\xd5\x4b\x6a\x02\x93\xcd\xe5\xd1\xd5\x9f\xcd\x38\x8f\xfc\x73\xe7\x3f\xaf\xee\xbb\x7b\x55\xb7\xf4\xed\x2b\xfa\x1d\x00\x00\xff\xff\x7b\x94\x2f\x2e\xcb\x0e\x00\x00")

func tmplMapTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMapTmpl,
		"tmpl/map.tmpl",
	)
}

func tmplMapTmpl() (*asset, error) {
	bytes, err := tmplMapTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/map.tmpl", size: 3787, mode: os.FileMode(420), modTime: time.Unix(1634851736, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScalarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xc1\xca\x82\x50\x10\x85\xf7\x3e\xc5\xc1\xd5\xff\x83\xf8\x00\x42\xab\x5a\x8a\x04\x42\x5b\x19\x64\xb2\x81\x49\x6d\xb4\x82\xec\xbe\x7b\xdc\xbc\x42\x90\xcd\x6e\xe6\xfb\xe6\x70\x6e\x64\x98\x26\xa4\x78\x22\xef\x6a\xd2\x82\xce\x0c\xe7\xb0\x41\x63\xd4\x9f\x2e\x9a\x16\x7c\x2f\x6b\x52\xb2\xbf\xe5\x32\xaf\xdb\xae\x3d\x4a\x33\x45\x00\xe0\xbf\x32\x84\x89\x7d\x5e\xc8\x89\x93\x37\xdf\xf1\x50\x9b\xf4\xa3\x74\x6d\xb6\xc6\x4b\x36\x21\x95\x07\x67\x5f\x65\x9c\xab\xaa\x61\xc1\xb3\xbd\x27\x1b\xf8\x40\x7a\xfd\xa1\xf7\x9e\x7f\xa8\xb9\x8c\x6c\xa4\x5e\x5e\x77\x83\x90\x44\xee\x3f\x7a\x05\x00\x00\xff\xff\xc1\x29\x39\x00\x11\x01\x00\x00")

func tmplScalarTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScalarTmpl,
		"tmpl/scalar.tmpl",
	)
}

func tmplScalarTmpl() (*asset, error) {
	bytes, err := tmplScalarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/scalar.tmpl", size: 273, mode: os.FileMode(420), modTime: time.Unix(1623174368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScalar_parseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xbf\x4e\xc7\x20\x14\x85\x77\x9e\xe2\x8e\xf0\x1b\x18\x3a\x36\x71\xd0\xd9\x34\x46\xdd\x9b\x2b\xbd\xad\x44\x44\xc2\x9f\x36\x0d\xf2\xee\x06\xb4\x69\x47\xc7\x73\xe0\xfb\x4e\xee\x9c\xac\x82\x9c\x41\xc2\x37\x3c\x7e\x29\x34\x03\x7e\x52\x29\xe3\xe8\xd0\x07\xe2\x2b\x9a\x44\xa0\x6d\x24\x3f\xa3\xa2\x5c\xc4\x35\x40\x66\x00\x00\x6f\x49\x9b\x89\x3c\xf4\x77\xd5\xf4\xba\x3b\x7a\x42\xf5\x81\x0b\x95\x22\x6b\x92\xd5\x5f\xbd\x50\xc5\xcf\xe4\xbc\x1c\x68\x7b\xf8\xa5\xb8\x68\x8e\xb0\xe9\xa8\xde\x61\xed\xaa\xa5\xad\x4a\x1e\x77\x47\xe2\x6f\x43\x61\x20\x08\xd1\x6b\xbb\xf4\xad\xb8\x0c\xcb\xfb\x10\xf4\x62\x5f\xda\x2b\x5f\x3b\x71\x12\xb7\x7f\x21\xb7\x83\x99\x68\xc6\x64\xe2\xf9\xdd\x53\x4c\xde\x82\xd5\xa6\x55\x85\x5d\xca\x43\xd5\x0e\xe1\x82\x15\xf6\x13\x00\x00\xff\xff\x8c\x00\x0b\x27\x4d\x01\x00\x00")

func tmplScalar_parseTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScalar_parseTmpl,
		"tmpl/scalar_parse.tmpl",
	)
}

func tmplScalar_parseTmpl() (*asset, error) {
	bytes, err := tmplScalar_parseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/scalar_parse.tmpl", size: 333, mode: os.FileMode(420), modTime: time.Unix(1623174368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScalar_parseliteralTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xcd\x4e\xc3\x30\x10\x84\xef\x79\x8a\x39\x26\x1c\xfc\x00\x91\x7a\x28\xe7\xaa\x42\xb4\xe2\x5a\x2d\xee\x26\x58\x18\x63\xf9\x87\xaa\x5a\xfc\xee\xc8\x6e\x49\x73\xf3\xae\x77\x66\xbe\x99\xb2\xd3\x10\x51\xf8\xdd\x7d\x6b\xb2\x7b\xfa\xe2\x52\x4e\x27\x4f\x21\xf2\xce\x24\x0e\x64\xfb\x1f\xb2\x99\xb7\x87\x23\x28\x26\xf5\x56\x87\x01\xc6\x25\x0e\x13\x69\x96\x02\xe9\x00\xe0\x3d\x1b\x7b\xe6\x80\x71\x03\x11\x1c\xaf\x9e\x5f\x48\x7f\xd2\xcc\xa5\xa8\x3a\x29\x11\xa8\xea\x8f\x1a\xf0\xca\x3e\xa8\x3d\x5f\x9e\x6f\xaa\x7e\x68\x1e\xf1\x62\x92\xfe\xc0\x12\x38\x6e\x96\xb7\xea\xd3\xd5\xf3\x70\x0f\xd3\x14\x19\x4f\x95\xe7\x90\x82\x71\x73\xa3\x1a\xdb\xd7\x8a\x45\x6d\x63\x34\xb3\xbb\x9d\x2c\x35\xee\x15\xda\xf1\x99\x27\xca\x36\x3d\x94\x81\x53\x0e\x0e\xce\xd8\xb6\x2a\xdd\x6a\xf9\xef\xda\x98\xfb\xa1\x2b\xdd\x5f\x00\x00\x00\xff\xff\x59\x1d\xf2\x3c\x3e\x01\x00\x00")

func tmplScalar_parseliteralTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScalar_parseliteralTmpl,
		"tmpl/scalar_parseliteral.tmpl",
	)
}

func tmplScalar_parseliteralTmpl() (*asset, error) {
	bytes, err := tmplScalar_parseliteralTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/scalar_parseliteral.tmpl", size: 318, mode: os.FileMode(420), modTime: time.Unix(1623174368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScalar_serializeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd3\xc1\x4e\x84\x30\x10\x06\xe0\x3b\x4f\xf1\xbb\x27\x48\x0c\x0f\x40\xb2\x07\xbd\x6d\x34\x7b\xd1\xfb\xa6\xc0\xa0\x93\xd4\x2e\xb6\x45\x83\xb5\xef\x6e\x68\x61\x61\x25\x26\x1e\xf6\xb0\xbd\x00\x33\x3f\x33\xdf\xa5\x4d\xa7\x2a\x38\x87\x1c\xdf\x78\x3c\x56\x42\xee\xc5\x1b\x79\x7f\x38\x18\xd2\x2c\x24\x7f\x51\xfa\x21\x64\x47\x60\x65\x49\x37\xa2\x22\xe7\xb3\xe5\x07\x5c\x02\x00\xe6\x93\x6d\xf5\x8a\x98\x2d\xb6\xf1\x25\x4f\x6d\xdf\x52\x36\x46\x2a\x61\x08\xdc\xca\x3a\xdf\x1f\x6b\x2a\x42\x6d\x38\xce\x81\x1b\xa4\xf4\x8e\xfc\xb9\x6f\xe9\x81\x55\x9d\x3f\x59\xcd\xea\x05\x9b\x9d\xb2\x9b\x0c\xde\x9f\xc2\x7c\x0b\xd2\x7a\xde\x70\x67\x76\xca\xa6\xd9\xdc\x6f\x42\xff\x66\x0b\xc5\x72\x5c\x3c\x1d\x4d\xb6\xd3\x6a\xe8\x9f\xca\xf3\xe0\xb1\xc9\x4b\x16\xc9\x41\xfc\x97\x8d\xaf\xd8\x76\xdf\x5b\x32\xe7\xba\x72\xa5\x0b\xa1\x0b\xfa\xca\xff\xfb\xca\x2b\xf7\xc5\xe7\x39\xd0\xac\x80\x31\x75\x41\xa1\x59\x09\xfd\x2a\x33\x2d\x1f\x2e\xed\xe4\x86\xf7\x0b\xc5\xf0\x6f\xa8\x85\x4a\x4d\x8d\xe8\xa4\x2d\x7e\xcf\x51\x2c\x93\x88\xf0\xc9\x4f\x00\x00\x00\xff\xff\xdb\x7e\x01\xd1\x06\x04\x00\x00")

func tmplScalar_serializeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScalar_serializeTmpl,
		"tmpl/scalar_serialize.tmpl",
	)
}

func tmplScalar_serializeTmpl() (*asset, error) {
	bytes, err := tmplScalar_serializeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/scalar_serialize.tmpl", size: 1030, mode: os.FileMode(420), modTime: time.Unix(1634760123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\xdd\x4a\xc3\x30\x14\x07\xf0\xeb\xf6\x29\xfe\x8c\x21\x1b\xc4\x3e\x40\x60\x57\x82\x20\x68\x04\xf1\x7e\x64\xeb\x69\xad\xc4\x64\x26\x3a\x19\x31\xef\x2e\x69\xba\x7e\x49\x73\xd5\xf3\xf5\xa3\xe7\x9c\xa5\x85\xf7\x28\xf0\x8b\x47\x73\x94\x4a\xc8\x0f\x42\x08\xd8\xa1\xb6\xf2\xf4\xf6\xa9\x0a\x41\x3f\xcf\x87\x77\x3a\x7e\x6d\xae\x99\x14\xde\x19\x5d\x35\xb5\xcf\x01\x20\x4e\x71\xac\x22\xd4\x01\x2b\xd6\x16\xee\x1b\x52\xa5\xe3\x3d\x96\xe2\x34\x14\x9f\xf7\xb7\xb0\x52\xd7\x84\x75\x15\x4b\xe0\x3b\x74\x4d\x08\xa1\x6f\x9b\xc8\x1c\x37\x13\x6e\xd0\x92\x88\xa6\x42\xf1\xe0\x9e\xe4\xe5\x40\x63\x24\xbe\xd7\xcb\x89\x78\xbb\x70\xfc\x9a\x2d\xcd\xe6\x10\x29\xb7\x20\x8c\x8e\x23\x8c\x16\xdf\x4a\x6d\x16\xd0\xed\x7f\x55\x97\x73\xf4\x85\x9c\x51\xe7\xf4\x67\xeb\xeb\xa2\xfb\x7d\x8c\xda\xb3\x0c\x29\x9b\x3a\x07\x34\xb0\x2c\xcb\x26\xf7\x24\x5d\x76\x7c\x60\x79\xd8\xe6\x7f\x01\x00\x00\xff\xff\x9c\x53\x0d\x0e\xe3\x01\x00\x00")

func tmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplStructTmpl,
		"tmpl/struct.tmpl",
	)
}

func tmplStructTmpl() (*asset, error) {
	bytes, err := tmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/struct.tmpl", size: 483, mode: os.FileMode(420), modTime: time.Unix(1623174368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplStruct_emptyTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\xc1\x4a\xc4\x30\x10\x86\xef\x7d\x8a\x9f\x1e\xa4\x85\xb0\x0f\x50\xf0\xa2\xe8\x49\x56\x11\xef\xcb\x58\xa7\x6b\x24\x9b\xd4\x49\xba\x2a\x31\xef\x2e\xb1\xdd\x96\xfc\xa7\xcc\xe4\x9b\xef\x3f\x93\x20\x46\xec\xf0\x8b\x07\xd7\x93\xd9\xd3\x89\x91\x12\xae\x71\x14\x1a\xdf\x3f\xcd\x6e\xcf\x5f\x8f\xaf\x1f\xdc\x87\xe6\xb2\x99\xc7\x5b\x67\x07\x7d\x8c\x15\x00\xe4\xab\x0e\x75\x16\x2d\x82\x5a\xfd\x7f\xdc\x6b\x36\x6f\xbe\x5b\x65\xf3\x3c\x1f\xe5\xd4\x87\xc3\xdd\xb7\xf6\xc1\xd7\x1d\xae\x0a\x68\x63\x72\x5e\x7e\x46\xde\x2c\x37\xce\x19\x26\xab\x0a\xe4\x99\xbd\x33\x67\xee\x30\x4c\xb6\x6f\xc6\x15\x5e\xf6\x4f\x24\x74\xf2\x2d\x1a\x6d\x03\xcb\x40\x3d\xc7\xa4\xc0\x22\x4e\x5a\x94\x65\x39\xc2\x61\x12\x8b\x20\x13\x2b\x58\x6d\x0a\x20\x6d\xcd\xcb\x33\xa9\x2a\xb5\xd5\x5f\x00\x00\x00\xff\xff\xd2\xb1\xdc\x60\x4d\x01\x00\x00")

func tmplStruct_emptyTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplStruct_emptyTmpl,
		"tmpl/struct_empty.tmpl",
	)
}

func tmplStruct_emptyTmpl() (*asset, error) {
	bytes, err := tmplStruct_emptyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/struct_empty.tmpl", size: 333, mode: os.FileMode(420), modTime: time.Unix(1623174368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplStruct_fieldTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\xcf\x6e\xdc\x20\x10\xc6\xef\x79\x8a\x29\x27\x90\x2c\x1e\xa0\x52\x0f\xfd\x93\x4a\xab\x36\x55\x94\x4d\xcf\x11\xb1\x07\x17\x19\x63\x07\x70\x95\x15\xe1\xdd\x2b\xf0\xff\xaa\xed\x6e\x2f\xd9\xc3\xae\x76\x60\xbe\xdf\xcc\xf7\x21\x07\x53\x42\x08\xc0\x3d\xff\x26\x5a\x84\x18\x1f\x1e\xd2\x5f\xa9\x50\x57\xb9\x94\x2a\x16\x5d\xa7\x7f\x22\xed\xa1\xb6\xa2\xff\xf1\xa4\xf9\xdd\x58\xb9\x15\x56\xb4\x8e\x01\x55\xc6\xa3\x95\xa2\xc4\x10\x0b\x40\x6b\x3b\xcb\x20\x5c\x01\x00\x78\x57\x40\xd7\xc0\xdb\x77\xd0\xf3\x63\x37\xd8\x12\x39\x0d\x01\xee\x4f\x3d\xde\x8a\xb2\x11\x75\x82\xf2\x3c\x02\xbc\xe4\xf2\xf1\xd4\x3e\x76\x1a\x62\x64\x59\x40\x49\x78\xd3\x35\x93\x5a\xfa\x58\xf4\x83\x35\x60\x94\x2e\x40\xb6\x9e\x5f\x27\x9c\xa4\x68\xed\x77\x83\xcf\x3d\x96\x1e\xab\xa4\x53\x2c\xc4\x02\xc8\x85\x48\x32\x32\x63\xfe\x0e\x21\xc1\x27\x2f\x0e\xee\x46\x9c\x1e\x53\x67\x3e\x93\x69\x23\xef\xf8\xe7\x74\xb8\x77\x0c\x62\xa4\xcb\xe8\x92\x5f\x3f\x2b\xe7\x1d\x65\x9b\x0d\x76\xc2\x89\x0f\x2f\x70\x70\x1f\x06\xa5\xfd\xc1\xcc\x84\xcd\xaa\x92\xdf\x0c\xce\x53\xc6\xdf\xbb\x15\x35\xf5\xa5\x9f\x2f\xca\x54\x2b\x75\x22\xa0\x76\x98\x30\x54\x98\x0a\x28\x3e\x6d\xfb\xf8\xdc\xc5\x8f\xde\x2a\x53\x03\xd1\xca\x34\x84\x01\x35\x08\x74\x0f\xf8\xaa\x4c\x73\x2f\x6c\x8d\x9e\x01\x99\xf3\x3f\x7c\x22\x8c\x6d\x27\xf5\xf9\xc6\x47\x55\x9d\xf1\x65\xde\x24\xa9\xee\xe7\xdd\x53\xef\xf2\xe6\x23\x17\xc8\xa2\x4e\xb6\xcc\x79\xc9\xbf\x1b\x56\xa4\x57\xb2\xbb\x9f\x8d\x1a\x33\x1e\x9b\xff\xfc\xae\xe6\xb6\xe5\x21\xcc\x6e\x9e\x09\x6d\xd2\xf8\x97\x01\x17\x65\xf8\xaa\xf9\x5d\x9c\xdd\x26\xb4\xff\x0e\xec\xb7\xb0\xce\x1b\xb5\x86\xb0\xe6\x16\xaf\x7e\x05\x00\x00\xff\xff\x95\x14\x53\x28\xb1\x04\x00\x00")

func tmplStruct_fieldTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplStruct_fieldTmpl,
		"tmpl/struct_field.tmpl",
	)
}

func tmplStruct_fieldTmpl() (*asset, error) {
	bytes, err := tmplStruct_fieldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/struct_field.tmpl", size: 1201, mode: os.FileMode(420), modTime: time.Unix(1634851691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplUnionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x5d\x6f\xd3\x3c\x14\xbe\x6e\x7f\xc5\x79\xa3\xed\x55\x82\x3a\xff\x80\xa0\x5d\x0c\x10\xd2\x04\x94\x69\x1d\xdc\x00\xaa\x3c\xf7\xa4\x35\x73\xed\x60\x3b\x9b\xaa\xcc\xff\x1d\x39\xdf\x4e\x56\x36\x71\x87\xaf\x6c\x9f\x8f\x9c\xf3\xe4\x39\x8f\xef\xa9\x86\xb2\x04\x02\x8f\xf0\x51\x31\x2a\x96\x74\x8f\xe0\x1c\x9c\xc3\x56\xd3\x7c\xf7\x4b\x90\x25\x3e\x7c\x91\x5c\xc9\xb8\xbd\xa8\x4e\x6f\x95\xcc\xf8\xb6\x9c\x03\x00\xf8\x98\x14\x22\x9f\xa6\x09\x8f\x16\x95\xe1\xe6\x90\xa3\x49\xe1\xdb\x8f\x57\x6d\xec\xe7\xdb\x9f\xc8\x6c\x1d\xe6\x57\x59\x9e\x81\xa6\x72\x8b\x70\x72\xc7\xe5\x06\xd2\x73\x20\x9f\x70\x7f\x8b\xda\x38\x37\xf0\xe2\x59\xe3\xf0\x08\x97\x66\x65\x75\xc1\x6c\x60\xef\xac\xc3\x26\x16\x03\x07\x14\x06\x07\x11\x85\xef\x61\xbd\x2e\xcb\x93\xaa\x64\xe7\xaa\xbd\xcf\xd1\x9c\x83\x58\xb9\x09\x3e\x76\x06\xfd\x4d\xe3\x78\x8d\x46\x89\x7b\xf4\x0d\xa7\x90\x15\x92\xc5\x79\x07\xe0\xc0\x76\x45\x35\xdd\x9b\x04\x46\x78\x40\x0f\x08\xcf\x40\xaa\x0d\x2e\x40\xdd\x79\x30\x72\xf2\x95\x8a\x02\x49\xcc\x73\xb1\x21\x4b\xb5\xc1\xe4\xb5\x37\xf5\x01\x7e\x99\x07\x6e\xd9\xae\x0a\x24\x57\x5a\x59\x65\x0f\x39\xc6\xc9\xc8\xeb\xe5\x78\xbf\x04\x73\xbf\x18\x35\xe8\xc1\xaf\x5b\x63\x77\x74\x8b\xce\x11\x7f\x22\xed\x2f\x69\x19\x91\x4e\x4a\xc9\xa8\x10\x76\xa7\x55\xb1\xdd\xfd\x6d\xd2\xf5\xfa\x1a\x73\x3d\x4d\xad\xd1\x16\x5a\x1e\xa3\xc5\xa8\xcd\x11\x33\xfe\x81\xbe\x9e\x25\xef\xb8\xc3\x80\xbf\x30\xe1\x70\xbb\xdc\x6c\x36\x9b\x75\x37\xbd\x2d\xdb\x5b\x72\xa5\xb9\xb4\x59\x1c\x5d\x30\x5b\x50\x01\x9e\x60\x70\x7a\x93\xc2\xe9\x3d\x48\x65\x81\x37\x55\x7d\x97\xd1\xa2\x25\x6d\xb7\x49\xe6\xa3\x06\x24\x17\xed\xf0\xb8\x64\x3e\xff\x33\x29\x8f\x11\xb1\xfb\x73\x5e\xc2\x9e\x85\x24\x14\xb4\x7a\xec\xe2\x70\x0a\x9f\x94\xb4\x36\x1f\x09\xd3\x35\x02\xf7\x0e\x0d\xd3\x3c\xb7\x5c\xc9\x14\xa2\xd5\x41\xda\x1d\x5a\xce\xea\x72\x60\x5f\xf5\x00\x0f\x9a\xe6\x39\xea\x26\xe4\x3d\x47\xb1\x31\x69\x57\x4d\x7d\x1e\x2a\x22\x04\xfd\xbe\x29\xb8\xb0\x97\x72\xc8\xdb\x28\x4a\xe1\xff\x20\x3e\x1c\xf4\x5a\x85\x9e\x62\xff\x50\xd7\xa0\x97\xad\x63\x92\xd5\xca\x55\xcc\xa5\x45\x9d\x51\x86\xa5\x5b\x00\x6a\xad\xf4\x53\xe2\x62\x4d\x2f\x5b\x2b\x55\x68\x86\x24\x0e\x09\x0f\x15\x90\x5d\x5d\xde\xb2\x3a\xec\x6f\x95\x58\xaa\x6b\x64\x85\x36\xde\x23\x99\x24\xe6\x19\xfc\x37\x11\xbd\x29\xa7\xaa\xd2\x96\xca\x7a\x99\x9c\xb8\xba\x63\xd3\x64\x0d\xb9\x30\xa3\xa2\x3e\xf8\xad\x73\x71\x58\xca\x00\xbc\xe0\x7d\xf0\xa3\x04\xfd\x7b\xe0\x92\x79\x3b\x73\xfd\x9c\xfd\x0e\x00\x00\xff\xff\x01\x1b\x4d\x3e\x68\x07\x00\x00")

func tmplUnionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplUnionTmpl,
		"tmpl/union.tmpl",
	)
}

func tmplUnionTmpl() (*asset, error) {
	bytes, err := tmplUnionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/union.tmpl", size: 1896, mode: os.FileMode(420), modTime: time.Unix(1623174368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplUnion_degenerateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x54\x4d\x6b\x1b\x31\x10\x3d\xcb\xbf\x62\x62\x42\x59\xc3\x56\xe9\xd9\xe0\x43\x68\x28\x94\x26\x4e\x48\x72\x33\xc6\xc8\xbb\xb3\xae\x58\x7d\x45\x92\x4d\x8d\xba\xff\xbd\x8c\xb4\x4e\x4d\x0e\xa5\x34\xd7\x5e\x16\xed\xcc\xd3\x7b\x6f\x66\x1f\x9b\xd2\x47\xf0\xc2\xec\x10\x2e\x7b\x69\x5a\x98\x2f\x80\xdf\xa1\xde\xa2\x0f\xc3\x30\x61\x29\xc9\x0e\x2a\x7c\x81\xa9\x16\x6e\x5a\x30\xfc\xf9\xe8\xf0\x1b\x1d\x9e\xa2\x97\x66\x37\x03\x42\xee\x8d\xb4\x66\xb3\x49\xe9\x92\x2f\x85\xc6\x61\xc8\xe7\x8c\x2f\xef\xfc\xba\x6d\xbf\x48\x54\xed\x67\x6b\x3a\xb9\xab\xa6\xd3\x1a\x3e\xec\xbc\x70\xdf\x5f\x14\xcf\x8d\x34\x61\x8c\xb8\xe7\x90\xd2\x68\xe7\x27\xdc\xda\x46\xa8\xc2\x50\x4f\x18\x7b\xc4\x60\xd5\x01\xe7\xd0\xed\x4d\x53\x39\x38\x11\x8c\xf5\x07\xe1\x85\x0e\x33\xa8\xa4\x89\xe8\x3b\xd1\x60\x1a\x6a\x40\xef\xad\x9f\x01\xf1\xb3\x18\x6a\xb0\x3d\xcd\xe9\xf8\x93\xdd\xfb\x06\x79\x95\x12\x90\xee\x83\x68\x7a\xb1\x43\x18\x06\x7e\x66\x80\x3a\x4f\x47\xbd\xb5\x6a\x69\x1f\xb1\xd9\xfb\x40\x88\x19\x71\xc9\x0e\x2e\x6c\x5f\x78\x99\xc7\xb8\xf7\x06\x8c\x54\x59\x70\x69\xe3\xd2\xb6\x48\xad\x81\x1e\x5a\x92\x66\x0c\xfc\x4e\xb8\xaf\x11\xbd\x88\xd6\x57\x85\x25\xa2\x0e\xd4\xd4\xa2\xc7\x4a\x0b\xb7\x0a\x79\xaf\xeb\xb3\x19\x32\xb0\xb3\x1e\x2e\xb4\xe4\x37\xd6\x60\x35\x8e\xc3\xfa\x1a\x0e\x59\x30\x33\x48\xbe\xc4\x1f\xb1\xf0\x92\x3d\xaa\x5f\x2c\xc8\xd4\x08\x7f\x6b\x33\x17\xb3\x41\x76\x75\x05\xcf\xf7\x37\xf7\x73\xe8\xf1\x08\xf1\xe8\x10\xb4\x38\x82\xb1\x11\xb6\x08\xc5\x12\x2f\x92\xe1\x55\xb0\xe7\xd7\xa1\xa4\xe0\xdf\x34\xf3\xec\xab\x3e\xac\x61\x01\x87\xd7\x5d\x8d\xf8\xdc\xac\xe9\xda\x84\x31\xfa\xfa\xb4\x86\x94\x50\x05\x84\x53\x2c\x95\x0c\xf1\x7f\x2e\xdf\x91\x4b\x75\xca\xe5\xad\x0c\xf1\x4f\xc1\x5c\xad\xa5\x53\x2d\xa7\xcb\x35\x7c\xfa\x1d\x48\xf5\x26\x90\x9b\xf3\x40\xaa\xf7\x04\xb2\xe8\x2f\x40\x38\x87\xa6\xad\xc6\x38\x1c\x66\x7f\x9b\x13\xd3\x0e\xc3\x84\x7e\x70\xe5\xf4\x2b\x00\x00\xff\xff\x3e\x78\x8b\x31\xeb\x04\x00\x00")

func tmplUnion_degenerateTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplUnion_degenerateTmpl,
		"tmpl/union_degenerate.tmpl",
	)
}

func tmplUnion_degenerateTmpl() (*asset, error) {
	bytes, err := tmplUnion_degenerateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/union_degenerate.tmpl", size: 1259, mode: os.FileMode(420), modTime: time.Unix(1634851779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/common.tmpl":              tmplCommonTmpl,
	"tmpl/list.tmpl":                tmplListTmpl,
	"tmpl/map.tmpl":                 tmplMapTmpl,
	"tmpl/scalar.tmpl":              tmplScalarTmpl,
	"tmpl/scalar_parse.tmpl":        tmplScalar_parseTmpl,
	"tmpl/scalar_parseliteral.tmpl": tmplScalar_parseliteralTmpl,
	"tmpl/scalar_serialize.tmpl":    tmplScalar_serializeTmpl,
	"tmpl/struct.tmpl":              tmplStructTmpl,
	"tmpl/struct_empty.tmpl":        tmplStruct_emptyTmpl,
	"tmpl/struct_field.tmpl":        tmplStruct_fieldTmpl,
	"tmpl/union.tmpl":               tmplUnionTmpl,
	"tmpl/union_degenerate.tmpl":    tmplUnion_degenerateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": {nil, map[string]*bintree{
		"common.tmpl":              {tmplCommonTmpl, map[string]*bintree{}},
		"list.tmpl":                {tmplListTmpl, map[string]*bintree{}},
		"map.tmpl":                 {tmplMapTmpl, map[string]*bintree{}},
		"scalar.tmpl":              {tmplScalarTmpl, map[string]*bintree{}},
		"scalar_parse.tmpl":        {tmplScalar_parseTmpl, map[string]*bintree{}},
		"scalar_parseliteral.tmpl": {tmplScalar_parseliteralTmpl, map[string]*bintree{}},
		"scalar_serialize.tmpl":    {tmplScalar_serializeTmpl, map[string]*bintree{}},
		"struct.tmpl":              {tmplStructTmpl, map[string]*bintree{}},
		"struct_empty.tmpl":        {tmplStruct_emptyTmpl, map[string]*bintree{}},
		"struct_field.tmpl":        {tmplStruct_fieldTmpl, map[string]*bintree{}},
		"union.tmpl":               {tmplUnionTmpl, map[string]*bintree{}},
		"union_degenerate.tmpl":    {tmplUnion_degenerateTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
